# SPDX-License-Identifier: Apache-2.0 OR MIT
# Copyright 2020 Modio AB

# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
# before_script:
#   - apt-get update -yqq
#   - apt-get install -yqq --no-install-recommends build-essential

# Use cargo to test the project
test:cargo:
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo test --workspace --verbose

#  Restrictions to run only on master and tags if necessary
#  only:
#    refs:
#      - master
#      - tags


crosscompile:
  allow_failure: true
  before_script:
    - cp .cargo-cross-config /usr/local/cargo/config
    - rustup target add armv7-unknown-linux-gnueabihf
    - dpkg --add-architecture armhf
    - apt-get update
    - apt-get install -y libc6-armhf-cross libc6-dev-armhf-cross gcc-arm-linux-gnueabihf

  script:
    - cargo check --target x86_64-unknown-linux-gnu
    - cargo check --target armv7-unknown-linux-gnueabihf
    # Build
    - cargo build --release --target armv7-unknown-linux-gnueabihf

.rebase: &rebase
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      # do not run on master
      when: never

    - if: $CI_COMMIT_TAG
      # Do not run on tags
      when: never

    - if: $CI_MERGE_REQUEST_IID
      # Run only on merge requests
      when: always

  variables:
    # Make sure that git also fetches origin/master
    GIT_FETCH_EXTRA_FLAGS: master

  before_script:
    - git config --global user.email "ci@localhost"
    - git config --global user.name "CI System"


# Split check & fmt as two different jobs only so that we don't error early in
# case one of them fails
rebase:check:
  <<: *rebase
  script:
    - git rebase --rebase-merges --autosquash origin/master
      -x 'git --no-pager log --oneline --max-count=1'
      -x 'cargo check'

rebase:fmt:
  <<: *rebase
  script:
    - rustup component add rustfmt
    - git rebase --rebase-merges --autosquash origin/master
      -x 'git --no-pager log --oneline --max-count=1'
      -x 'cargo fmt -- --check'

rebase:clippy:
  <<: *rebase
  script:
    - rustup component add clippy
    - git rebase --rebase-merges --autosquash origin/master
      -x 'git --no-pager log --oneline --max-count=1'
      -x 'cargo clippy -- -W clippy::pedantic -W clippy::cargo'
