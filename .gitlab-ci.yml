---
# SPDX-License-Identifier: Apache-2.0 OR MIT
# Copyright 2021 Modio AB

# Keep the includes first to illustrate that definitions that everything that
# follows override included definitions.
include:
  # Use MergeRequest pipelines
  # https://docs.gitlab.com/ee/ci/yaml/#workflowrules-templates
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'
  - project: ModioAB/CI
    ref: main
    file:
      - /ci/default.yml
      - /ci/rebase.yml
      - /ci/rust-cross.yml

default:
  # We use a slightly modified `rust:latest` image
  # See https://gitlab.com/ModioAB/base-image/-/tree/master/rust  for details
  image: registry.gitlab.com/modioab/base-image/debian/rust:master

variables:
  PACKAGENAME: caramel-client

clippy:
  extends: .rust:clippy

# Use cargo to test the project
test:cargo:
  extends: .rust:test

lint:normal:
  extends: .rust:check

lint:pedantic:
  stage: check
  script:
    - cargo clippy --tests -- -D clippy::pedantic -D clippy::cargo

crosscompile:
  stage: build
  script:
    - cargo build --target x86_64-unknown-linux-gnu
    - cargo build --target x86_64-unknown-linux-musl
    - cargo build --target armv7-unknown-linux-gnueabihf

# Split check & fmt as two different jobs only so that we don't error early in
# case one of them fails
rebase:
  extends: .rebase
  needs:
    - job: lint:normal
      artifacts: false
  variables:
    # Make sure that git also fetches origin/main
    GIT_FETCH_EXTRA_FLAGS: $CI_DEFAULT_BRANCH
  parallel:
    matrix:
      - RUN_COMMAND:
          - cargo check
          - cargo fmt -- --check
          - cargo clippy --tests -- -D clippy::pedantic -D clippy::cargo
          - cargo doc --no-deps -p caramel-client
  script:
    - git every -x '${RUN_COMMAND}'


.release:
  rules:
    # Build containers & release
    # Always build on tags
    - if: '$CI_COMMIT_TAG'
      when: on_success
    # Always build from scheduled builds
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: on_success
    # Allow users to _manually_ build this from merge-requests
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      # If it's not tagged as "allow_failure", it will block the merge request
      # pipelines
      allow_failure: true
      when: manual
    # Do not build on other conditions
    - when: never


# Compile a binary, uploading an artifact to the GitLab server.
# The name "release" is part of the public API for the repository, as it's part
# of the artifact-URL that gets downloaded.
release:
  extends: .release
  stage: build
  script:
    - cargo build --release --target x86_64-unknown-linux-gnu
    - ( cd target/x86_64-unknown-linux-gnu/release;
        sha256sum caramel-client-rs > caramel-client-rs.sha256 )
    - cargo build --release --target x86_64-unknown-linux-musl
    - ( cd target/x86_64-unknown-linux-musl/release;
        sha256sum caramel-client-rs > caramel-client-rs.sha256 )
    - cargo build --release --target armv7-unknown-linux-gnueabihf
    - ( cd target/armv7-unknown-linux-gnueabihf/release;
        sha256sum caramel-client-rs > caramel-client-rs.sha256 )
  artifacts:
    name: "$CI_COMMIT_REF_SLUG"
    paths:
      - target/*/release/caramel-client-rs
      - target/*/release/caramel-client-rs.sha256


# This builds the "client" container that others can use to run the application.
release:container:
  image: $CONTAINER_IMAGE
  extends:
    - .release
  stage: deploy
  dependencies:
    - release
  script:
    - make login
    # Build the client container
    - make -f Makefile build-publish

.relvars:
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    X86_DYNAMIC: "x86_64-unknown-linux-gnu"
    X86_STATIC: "x86_64-unknown-linux-musl"
    ARMV7_DYNAMIC: "armv7-unknown-linux-gnueabihf"
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/caramel-client-test/${CI_COMMIT_TAG}"

release:upload:
  extends: .relvars
  image: curlimages/curl:latest
  stage: deploy
  dependencies:
    - release
  script:
    - |
      for ARCH in ${X86_DYNAMIC} ${X86_STATIC} ${ARMV7_DYNAMIC};
      do
        for FILE in caramel-client-rs caramel-client-rs.sha256;
        do
          curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "target/${ARCH}/release/${FILE}" "${PACKAGE_REGISTRY_URL}/${ARCH}-${FILE}"
        done
      done

release:final:
  extends: .relvars
  stage: deploy
  needs:
    - release:upload
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
                  --assets-link "{\"name\":  \"caramel-client-rs-${CI_COMMIT_TAG}-${X86_STATIC}\",  \"url\":  \"${PACKAGE_REGISTRY_URL}/${X86_STATIC}-caramel-client-rs\"   }" \
                  --assets-link "{\"name\":  \"caramel-client-rs-${CI_COMMIT_TAG}-${X86_DYNAMIC}\",  \"url\":  \"${PACKAGE_REGISTRY_URL}/${X86_DYNAMIC}-caramel-client-rs\" }" \
                  --assets-link "{\"name\":  \"caramel-client-rs-${CI_COMMIT_TAG}-${ARMV7_DYNAMIC}\",  \"url\":  \"${PACKAGE_REGISTRY_URL}/${ARMV7_DYNAMIC}-caramel-client-rs\"}"


# This is to publish the documentation to external site
# https://modioab.gitlab.io/caramel-client-rs/
pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      # only run on master
      when: on_success
    - when: never
  script:
    - cargo doc --no-deps -p caramel-client
    - rm -rf public
    - mv target/doc/ public
    - echo '<meta http-equiv="refresh" content="0; url=caramel_client">' > public/index.html
  artifacts:
    paths:
      - public
