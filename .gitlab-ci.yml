# SPDX-License-Identifier: Apache-2.0 OR MIT
# Copyright 2020 Modio AB

# We use a slightly modified `rust:buster` image
# See Dockerfile.build for details on what this image does differently compared
# to upstream `rust:buster` container
image: registry.gitlab.com/modioab/caramel-client-rs/build:ci-fixes

# Use cargo to test the project
test:cargo:
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo test --workspace --verbose





crosscompile:
  script:
    - cargo check --target x86_64-unknown-linux-gnu
    - cargo check --target armv7-unknown-linux-gnueabihf
    # Build
    - cargo build --target x86_64-unknown-linux-gnu
    - cargo build --target armv7-unknown-linux-gnueabihf



# This builds the "client" container that others can use to run the application.
release:container:
  image: registry.gitlab.com/modioab/base-image/fedora-31/container:master
  rules:
    # Build when any of these files change
    - changes:
      - Dockerfile
      - Makefile
      - build.mk
    # Always build on tags
    - if: '$CI_COMMIT_TAG'
      when: on_success
    # Always build from scheduled builds
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: on_success
    # Allow users to _manually_ build this from merge-requests
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
    # Do not build on other conditions
    - when: never
  script:
    - make login
    # Build the client container
    - make -f Makefile build-publish

# Compile a binary, uploading an artifact to the GitLab server
release:x86_64:
  rules:
    # Always build on tags
    - if: '$CI_COMMIT_TAG'
      when: on_success
    # Permit binary builds from merge-requests
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
    # Do not build on other conditions
    - when: never
  script:
    - cargo build --release --target x86_64-unknown-linux-gnu
  artifacts:
    name: "$CI_COMMIT_REF_SLUG"
    paths:
      - target/x86_64-unknown-linux-gnu/release/caramel-client-rs


.rebase: &rebase
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      # do not run on master
      when: never

    - if: $CI_COMMIT_TAG
      # Do not run on tags
      when: never

    - if: $CI_MERGE_REQUEST_IID
      # Run only on merge requests
      when: always

  variables:
    # Make sure that git also fetches origin/master
    GIT_FETCH_EXTRA_FLAGS: master

  before_script:
    - git config --global user.email "ci@localhost"
    - git config --global user.name "CI System"


# Split check & fmt as two different jobs only so that we don't error early in
# case one of them fails
rebase:check:
  <<: *rebase
  script:
    - git rebase --rebase-merges --autosquash origin/master
      -x 'git --no-pager log --oneline --max-count=1'
      -x 'cargo check'

rebase:fmt:
  <<: *rebase
  script:
    - git rebase --rebase-merges --autosquash origin/master
      -x 'git --no-pager log --oneline --max-count=1'
      -x 'cargo fmt -- --check'

rebase:clippy:
  <<: *rebase
  script:
    - git rebase --rebase-merges --autosquash origin/master
      -x 'git --no-pager log --oneline --max-count=1'
      -x 'cargo clippy -- -D clippy::pedantic -D clippy::cargo'


# This build the "build" container
container:build:
  image: registry.gitlab.com/modioab/base-image/fedora-31/container:master
  rules:
    # Build when any of these files change
    - changes:
      - Dockerfile.build
      - Makefile.build
      - build.mk
    # Always build from scheduled builds
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: on_success
    # Allow users to _manually_ build this from merge-requests in cases.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
    # Do not build on other conditions
    - when: never
  script:
    - make login
    # Build the dev containers
    - make -f Makefile.build build-publish
